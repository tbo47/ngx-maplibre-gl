{"version":3,"sources":["node_modules/@angular/material/fesm2022/button-toggle.mjs","projects/showcase/src/app/demo/examples/toggle-layers.component.ts"],"sourcesContent":["import * as i2 from '@angular/cdk/a11y';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { RIGHT_ARROW, DOWN_ARROW, LEFT_ARROW, UP_ARROW, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, EventEmitter, booleanAttribute, Directive, Optional, Inject, ContentChildren, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, ViewChild, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/bidi';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatRipple, MatPseudoCheckbox, MatCommonModule, MatRippleModule } from '@angular/material/core';\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nconst _c0 = [\"button\"];\nconst _c1 = [\"*\"];\nfunction MatButtonToggle_Conditional_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-pseudo-checkbox\", 3);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", ctx_r1.disabled);\n  }\n}\nfunction MatButtonToggle_Conditional_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-pseudo-checkbox\", 3);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", ctx_r1.disabled);\n  }\n}\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS', {\n  providedIn: 'root',\n  factory: MAT_BUTTON_TOGGLE_GROUP_DEFAULT_OPTIONS_FACTORY\n});\nfunction MAT_BUTTON_TOGGLE_GROUP_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    hideSingleSelectionIndicator: false,\n    hideMultipleSelectionIndicator: false\n  };\n}\n/**\n * Injection token that can be used to reference instances of `MatButtonToggleGroup`.\n * It serves as alternative token to the actual `MatButtonToggleGroup` class which\n * could cause unnecessary retention of the class and its component metadata.\n */\nconst MAT_BUTTON_TOGGLE_GROUP = /*#__PURE__*/new InjectionToken('MatButtonToggleGroup');\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*#__PURE__*/forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n// Counter used to generate unique IDs.\nlet uniqueIdCounter = 0;\n/** Change event object emitted by button toggle. */\nclass MatButtonToggleChange {\n  constructor( /** The button toggle that emits the event. */\n  source, /** The value assigned to the button toggle. */\n  value) {\n    this.source = source;\n    this.value = value;\n  }\n}\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\nlet MatButtonToggleGroup = /*#__PURE__*/(() => {\n  class MatButtonToggleGroup {\n    /** `name` attribute for the underlying `input` element. */\n    get name() {\n      return this._name;\n    }\n    set name(value) {\n      this._name = value;\n      this._markButtonsForCheck();\n    }\n    /** Value of the toggle group. */\n    get value() {\n      const selected = this._selectionModel ? this._selectionModel.selected : [];\n      if (this.multiple) {\n        return selected.map(toggle => toggle.value);\n      }\n      return selected[0] ? selected[0].value : undefined;\n    }\n    set value(newValue) {\n      this._setSelectionByValue(newValue);\n      this.valueChange.emit(this.value);\n    }\n    /** Selected button toggles in the group. */\n    get selected() {\n      const selected = this._selectionModel ? this._selectionModel.selected : [];\n      return this.multiple ? selected : selected[0] || null;\n    }\n    /** Whether multiple button toggles can be selected. */\n    get multiple() {\n      return this._multiple;\n    }\n    set multiple(value) {\n      this._multiple = value;\n      this._markButtonsForCheck();\n    }\n    /** Whether multiple button toggle group is disabled. */\n    get disabled() {\n      return this._disabled;\n    }\n    set disabled(value) {\n      this._disabled = value;\n      this._markButtonsForCheck();\n    }\n    /** The layout direction of the toggle button group. */\n    get dir() {\n      return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /** Whether checkmark indicator for single-selection button toggle groups is hidden. */\n    get hideSingleSelectionIndicator() {\n      return this._hideSingleSelectionIndicator;\n    }\n    set hideSingleSelectionIndicator(value) {\n      this._hideSingleSelectionIndicator = value;\n      this._markButtonsForCheck();\n    }\n    /** Whether checkmark indicator for multiple-selection button toggle groups is hidden. */\n    get hideMultipleSelectionIndicator() {\n      return this._hideMultipleSelectionIndicator;\n    }\n    set hideMultipleSelectionIndicator(value) {\n      this._hideMultipleSelectionIndicator = value;\n      this._markButtonsForCheck();\n    }\n    constructor(_changeDetector, defaultOptions, _dir) {\n      this._changeDetector = _changeDetector;\n      this._dir = _dir;\n      this._multiple = false;\n      this._disabled = false;\n      /**\n       * The method to be called in order to update ngModel.\n       * Now `ngModel` binding is not supported in multiple selection mode.\n       */\n      this._controlValueAccessorChangeFn = () => {};\n      /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n      this._onTouched = () => {};\n      this._name = `mat-button-toggle-group-${uniqueIdCounter++}`;\n      /**\n       * Event that emits whenever the value of the group changes.\n       * Used to facilitate two-way data binding.\n       * @docs-private\n       */\n      this.valueChange = new EventEmitter();\n      /** Event emitted when the group's value changes. */\n      this.change = new EventEmitter();\n      this.appearance = defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n      this.hideSingleSelectionIndicator = defaultOptions?.hideSingleSelectionIndicator ?? false;\n      this.hideMultipleSelectionIndicator = defaultOptions?.hideMultipleSelectionIndicator ?? false;\n    }\n    ngOnInit() {\n      this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    }\n    ngAfterContentInit() {\n      this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n      if (!this.multiple) {\n        this._initializeTabIndex();\n      }\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value) {\n      this.value = value;\n      this._changeDetector.markForCheck();\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n      this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n    /** Handle keydown event calling to single-select button toggle. */\n    _keydown(event) {\n      if (this.multiple || this.disabled) {\n        return;\n      }\n      const target = event.target;\n      const buttonId = target.id;\n      const index = this._buttonToggles.toArray().findIndex(toggle => {\n        return toggle.buttonId === buttonId;\n      });\n      let nextButton;\n      switch (event.keyCode) {\n        case SPACE:\n        case ENTER:\n          nextButton = this._buttonToggles.get(index);\n          break;\n        case UP_ARROW:\n          nextButton = this._buttonToggles.get(this._getNextIndex(index, -1));\n          break;\n        case LEFT_ARROW:\n          nextButton = this._buttonToggles.get(this._getNextIndex(index, this.dir === 'ltr' ? -1 : 1));\n          break;\n        case DOWN_ARROW:\n          nextButton = this._buttonToggles.get(this._getNextIndex(index, 1));\n          break;\n        case RIGHT_ARROW:\n          nextButton = this._buttonToggles.get(this._getNextIndex(index, this.dir === 'ltr' ? 1 : -1));\n          break;\n        default:\n          return;\n      }\n      event.preventDefault();\n      nextButton?._onButtonClick();\n      nextButton?.focus();\n    }\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent(toggle) {\n      const event = new MatButtonToggleChange(toggle, this.value);\n      this._rawValue = event.value;\n      this._controlValueAccessorChangeFn(event.value);\n      this.change.emit(event);\n    }\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     * @param deferEvents Whether to defer emitting the change events.\n     */\n    _syncButtonToggle(toggle, select, isUserInput = false, deferEvents = false) {\n      // Deselect the currently-selected toggle, if we're in single-selection\n      // mode and the button being toggled isn't selected at the moment.\n      if (!this.multiple && this.selected && !toggle.checked) {\n        this.selected.checked = false;\n      }\n      if (this._selectionModel) {\n        if (select) {\n          this._selectionModel.select(toggle);\n        } else {\n          this._selectionModel.deselect(toggle);\n        }\n      } else {\n        deferEvents = true;\n      }\n      // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n      // the side-effect is that we may end up updating the model value out of sequence in others\n      // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n      if (deferEvents) {\n        Promise.resolve().then(() => this._updateModelValue(toggle, isUserInput));\n      } else {\n        this._updateModelValue(toggle, isUserInput);\n      }\n    }\n    /** Checks whether a button toggle is selected. */\n    _isSelected(toggle) {\n      return this._selectionModel && this._selectionModel.isSelected(toggle);\n    }\n    /** Determines whether a button toggle should be checked on init. */\n    _isPrechecked(toggle) {\n      if (typeof this._rawValue === 'undefined') {\n        return false;\n      }\n      if (this.multiple && Array.isArray(this._rawValue)) {\n        return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n      }\n      return toggle.value === this._rawValue;\n    }\n    /** Initializes the tabindex attribute using the radio pattern. */\n    _initializeTabIndex() {\n      this._buttonToggles.forEach(toggle => {\n        toggle.tabIndex = -1;\n      });\n      if (this.selected) {\n        this.selected.tabIndex = 0;\n      } else if (this._buttonToggles.length > 0) {\n        this._buttonToggles.get(0).tabIndex = 0;\n      }\n      this._markButtonsForCheck();\n    }\n    /** Obtain the subsequent index to which the focus shifts. */\n    _getNextIndex(index, offset) {\n      let nextIndex = index + offset;\n      if (nextIndex === this._buttonToggles.length) {\n        nextIndex = 0;\n      }\n      if (nextIndex === -1) {\n        nextIndex = this._buttonToggles.length - 1;\n      }\n      return nextIndex;\n    }\n    /** Updates the selection state of the toggles in the group based on a value. */\n    _setSelectionByValue(value) {\n      this._rawValue = value;\n      if (!this._buttonToggles) {\n        return;\n      }\n      if (this.multiple && value) {\n        if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw Error('Value must be an array in multiple-selection mode.');\n        }\n        this._clearSelection();\n        value.forEach(currentValue => this._selectValue(currentValue));\n      } else {\n        this._clearSelection();\n        this._selectValue(value);\n      }\n    }\n    /** Clears the selected toggles. */\n    _clearSelection() {\n      this._selectionModel.clear();\n      this._buttonToggles.forEach(toggle => {\n        toggle.checked = false;\n        // If the button toggle is in single select mode, initialize the tabIndex.\n        if (!this.multiple) {\n          toggle.tabIndex = -1;\n        }\n      });\n    }\n    /** Selects a value if there's a toggle that corresponds to it. */\n    _selectValue(value) {\n      const correspondingOption = this._buttonToggles.find(toggle => {\n        return toggle.value != null && toggle.value === value;\n      });\n      if (correspondingOption) {\n        correspondingOption.checked = true;\n        this._selectionModel.select(correspondingOption);\n        if (!this.multiple) {\n          // If the button toggle is in single select mode, reset the tabIndex.\n          correspondingOption.tabIndex = 0;\n        }\n      }\n    }\n    /** Syncs up the group's value with the model and emits the change event. */\n    _updateModelValue(toggle, isUserInput) {\n      // Only emit the change event for user input.\n      if (isUserInput) {\n        this._emitChangeEvent(toggle);\n      }\n      // Note: we emit this one no matter whether it was a user interaction, because\n      // it is used by Angular to sync up the two-way data binding.\n      this.valueChange.emit(this.value);\n    }\n    /** Marks all of the child button toggles to be checked. */\n    _markButtonsForCheck() {\n      this._buttonToggles?.forEach(toggle => toggle._markForCheck());\n    }\n    static {\n      this.ɵfac = function MatButtonToggleGroup_Factory(t) {\n        return new (t || MatButtonToggleGroup)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8), i0.ɵɵdirectiveInject(i1.Directionality, 8));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: MatButtonToggleGroup,\n        selectors: [[\"mat-button-toggle-group\"]],\n        contentQueries: function MatButtonToggleGroup_ContentQueries(rf, ctx, dirIndex) {\n          if (rf & 1) {\n            i0.ɵɵcontentQuery(dirIndex, MatButtonToggle, 5);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._buttonToggles = _t);\n          }\n        },\n        hostAttrs: [1, \"mat-button-toggle-group\"],\n        hostVars: 6,\n        hostBindings: function MatButtonToggleGroup_HostBindings(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵlistener(\"keydown\", function MatButtonToggleGroup_keydown_HostBindingHandler($event) {\n              return ctx._keydown($event);\n            });\n          }\n          if (rf & 2) {\n            i0.ɵɵattribute(\"role\", ctx.multiple ? \"group\" : \"radiogroup\")(\"aria-disabled\", ctx.disabled);\n            i0.ɵɵclassProp(\"mat-button-toggle-vertical\", ctx.vertical)(\"mat-button-toggle-group-appearance-standard\", ctx.appearance === \"standard\");\n          }\n        },\n        inputs: {\n          appearance: \"appearance\",\n          name: \"name\",\n          vertical: [2, \"vertical\", \"vertical\", booleanAttribute],\n          value: \"value\",\n          multiple: [2, \"multiple\", \"multiple\", booleanAttribute],\n          disabled: [2, \"disabled\", \"disabled\", booleanAttribute],\n          hideSingleSelectionIndicator: [2, \"hideSingleSelectionIndicator\", \"hideSingleSelectionIndicator\", booleanAttribute],\n          hideMultipleSelectionIndicator: [2, \"hideMultipleSelectionIndicator\", \"hideMultipleSelectionIndicator\", booleanAttribute]\n        },\n        outputs: {\n          valueChange: \"valueChange\",\n          change: \"change\"\n        },\n        exportAs: [\"matButtonToggleGroup\"],\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, {\n          provide: MAT_BUTTON_TOGGLE_GROUP,\n          useExisting: MatButtonToggleGroup\n        }]), i0.ɵɵInputTransformsFeature]\n      });\n    }\n  }\n  return MatButtonToggleGroup;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Single button inside of a toggle group. */\nlet MatButtonToggle = /*#__PURE__*/(() => {\n  class MatButtonToggle {\n    /** Unique ID for the underlying `button` element. */\n    get buttonId() {\n      return `${this.id}-button`;\n    }\n    /** Tabindex of the toggle. */\n    get tabIndex() {\n      return this._tabIndex;\n    }\n    set tabIndex(value) {\n      this._tabIndex = value;\n      this._markForCheck();\n    }\n    /** The appearance style of the button. */\n    get appearance() {\n      return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n    }\n    set appearance(value) {\n      this._appearance = value;\n    }\n    /** Whether the button is checked. */\n    get checked() {\n      return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n    }\n    set checked(value) {\n      if (value !== this._checked) {\n        this._checked = value;\n        if (this.buttonToggleGroup) {\n          this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n        }\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /** Whether the button is disabled. */\n    get disabled() {\n      return this._disabled || this.buttonToggleGroup && this.buttonToggleGroup.disabled;\n    }\n    set disabled(value) {\n      this._disabled = value;\n    }\n    constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, defaultTabIndex, defaultOptions) {\n      this._changeDetectorRef = _changeDetectorRef;\n      this._elementRef = _elementRef;\n      this._focusMonitor = _focusMonitor;\n      this._checked = false;\n      /**\n       * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n       */\n      this.ariaLabelledby = null;\n      this._disabled = false;\n      /** Event emitted when the group value changes. */\n      this.change = new EventEmitter();\n      const parsedTabIndex = Number(defaultTabIndex);\n      this.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;\n      this.buttonToggleGroup = toggleGroup;\n      this.appearance = defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    ngOnInit() {\n      const group = this.buttonToggleGroup;\n      this.id = this.id || `mat-button-toggle-${uniqueIdCounter++}`;\n      if (group) {\n        if (group._isPrechecked(this)) {\n          this.checked = true;\n        } else if (group._isSelected(this) !== this._checked) {\n          // As side effect of the circular dependency between the toggle group and the button,\n          // we may end up in a state where the button is supposed to be checked on init, but it\n          // isn't, because the checked value was assigned too early. This can happen when Ivy\n          // assigns the static input value before the `ngOnInit` has run.\n          group._syncButtonToggle(this, this._checked);\n        }\n      }\n    }\n    ngAfterViewInit() {\n      this._focusMonitor.monitor(this._elementRef, true);\n    }\n    ngOnDestroy() {\n      const group = this.buttonToggleGroup;\n      this._focusMonitor.stopMonitoring(this._elementRef);\n      // Remove the toggle from the selection once it's destroyed. Needs to happen\n      // on the next tick in order to avoid \"changed after checked\" errors.\n      if (group && group._isSelected(this)) {\n        group._syncButtonToggle(this, false, false, true);\n      }\n    }\n    /** Focuses the button. */\n    focus(options) {\n      this._buttonElement.nativeElement.focus(options);\n    }\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    _onButtonClick() {\n      const newChecked = this.isSingleSelector() ? true : !this._checked;\n      if (newChecked !== this._checked) {\n        this._checked = newChecked;\n        if (this.buttonToggleGroup) {\n          this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n          this.buttonToggleGroup._onTouched();\n        }\n      }\n      if (this.isSingleSelector()) {\n        const focusable = this.buttonToggleGroup._buttonToggles.find(toggle => {\n          return toggle.tabIndex === 0;\n        });\n        // Modify the tabindex attribute of the last focusable button toggle to -1.\n        if (focusable) {\n          focusable.tabIndex = -1;\n        }\n        // Modify the tabindex attribute of the presently selected button toggle to 0.\n        this.tabIndex = 0;\n      }\n      // Emit a change event when it's the single selector\n      this.change.emit(new MatButtonToggleChange(this, this.value));\n    }\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck() {\n      // When the group value changes, the button will not be notified.\n      // Use `markForCheck` to explicit update button toggle's status.\n      this._changeDetectorRef.markForCheck();\n    }\n    /** Gets the name that should be assigned to the inner DOM node. */\n    _getButtonName() {\n      if (this.isSingleSelector()) {\n        return this.buttonToggleGroup.name;\n      }\n      return this.name || null;\n    }\n    /** Whether the toggle is in single selection mode. */\n    isSingleSelector() {\n      return this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    }\n    static {\n      this.ɵfac = function MatButtonToggle_Factory(t) {\n        return new (t || MatButtonToggle)(i0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_GROUP, 8), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2.FocusMonitor), i0.ɵɵinjectAttribute('tabindex'), i0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8));\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: MatButtonToggle,\n        selectors: [[\"mat-button-toggle\"]],\n        viewQuery: function MatButtonToggle_Query(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵviewQuery(_c0, 5);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._buttonElement = _t.first);\n          }\n        },\n        hostAttrs: [\"role\", \"presentation\", 1, \"mat-button-toggle\"],\n        hostVars: 12,\n        hostBindings: function MatButtonToggle_HostBindings(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵlistener(\"focus\", function MatButtonToggle_focus_HostBindingHandler() {\n              return ctx.focus();\n            });\n          }\n          if (rf & 2) {\n            i0.ɵɵattribute(\"aria-label\", null)(\"aria-labelledby\", null)(\"id\", ctx.id)(\"name\", null);\n            i0.ɵɵclassProp(\"mat-button-toggle-standalone\", !ctx.buttonToggleGroup)(\"mat-button-toggle-checked\", ctx.checked)(\"mat-button-toggle-disabled\", ctx.disabled)(\"mat-button-toggle-appearance-standard\", ctx.appearance === \"standard\");\n          }\n        },\n        inputs: {\n          ariaLabel: [0, \"aria-label\", \"ariaLabel\"],\n          ariaLabelledby: [0, \"aria-labelledby\", \"ariaLabelledby\"],\n          id: \"id\",\n          name: \"name\",\n          value: \"value\",\n          tabIndex: \"tabIndex\",\n          disableRipple: [2, \"disableRipple\", \"disableRipple\", booleanAttribute],\n          appearance: \"appearance\",\n          checked: [2, \"checked\", \"checked\", booleanAttribute],\n          disabled: [2, \"disabled\", \"disabled\", booleanAttribute]\n        },\n        outputs: {\n          change: \"change\"\n        },\n        exportAs: [\"matButtonToggle\"],\n        standalone: true,\n        features: [i0.ɵɵInputTransformsFeature, i0.ɵɵStandaloneFeature],\n        ngContentSelectors: _c1,\n        decls: 8,\n        vars: 13,\n        consts: [[\"button\", \"\"], [\"type\", \"button\", 1, \"mat-button-toggle-button\", \"mat-focus-indicator\", 3, \"click\", \"id\", \"disabled\"], [1, \"mat-button-toggle-label-content\"], [\"state\", \"checked\", \"aria-hidden\", \"true\", \"appearance\", \"minimal\", 1, \"mat-mdc-option-pseudo-checkbox\", 3, \"disabled\"], [1, \"mat-button-toggle-focus-overlay\"], [\"matRipple\", \"\", 1, \"mat-button-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"]],\n        template: function MatButtonToggle_Template(rf, ctx) {\n          if (rf & 1) {\n            const _r1 = i0.ɵɵgetCurrentView();\n            i0.ɵɵprojectionDef();\n            i0.ɵɵelementStart(0, \"button\", 1, 0);\n            i0.ɵɵlistener(\"click\", function MatButtonToggle_Template_button_click_0_listener() {\n              i0.ɵɵrestoreView(_r1);\n              return i0.ɵɵresetView(ctx._onButtonClick());\n            });\n            i0.ɵɵelementStart(2, \"span\", 2);\n            i0.ɵɵtemplate(3, MatButtonToggle_Conditional_3_Template, 1, 1, \"mat-pseudo-checkbox\", 3)(4, MatButtonToggle_Conditional_4_Template, 1, 1, \"mat-pseudo-checkbox\", 3);\n            i0.ɵɵprojection(5);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelement(6, \"span\", 4)(7, \"span\", 5);\n          }\n          if (rf & 2) {\n            const button_r3 = i0.ɵɵreference(1);\n            i0.ɵɵproperty(\"id\", ctx.buttonId)(\"disabled\", ctx.disabled || null);\n            i0.ɵɵattribute(\"role\", ctx.isSingleSelector() ? \"radio\" : \"button\")(\"tabindex\", ctx.disabled ? -1 : ctx.tabIndex)(\"aria-pressed\", !ctx.isSingleSelector() ? ctx.checked : null)(\"aria-checked\", ctx.isSingleSelector() ? ctx.checked : null)(\"name\", ctx._getButtonName())(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n            i0.ɵɵadvance(3);\n            i0.ɵɵconditional(ctx.buttonToggleGroup && ctx.checked && !ctx.buttonToggleGroup.multiple && !ctx.buttonToggleGroup.hideSingleSelectionIndicator ? 3 : -1);\n            i0.ɵɵadvance();\n            i0.ɵɵconditional(ctx.buttonToggleGroup && ctx.checked && ctx.buttonToggleGroup.multiple && !ctx.buttonToggleGroup.hideMultipleSelectionIndicator ? 4 : -1);\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"matRippleTrigger\", button_r3)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled);\n          }\n        },\n        dependencies: [MatRipple, MatPseudoCheckbox],\n        styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;-webkit-tap-highlight-color:rgba(0,0,0,0);transform:translateZ(0);border-radius:var(--mat-legacy-button-toggle-shape)}.mat-button-toggle-standalone:not([class*=mat-elevation-z]),.mat-button-toggle-group:not([class*=mat-elevation-z]){box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12)}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:var(--mat-standard-button-toggle-shape);border:solid 1px var(--mat-standard-button-toggle-divider-color)}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard .mat-pseudo-checkbox,.mat-button-toggle-group-appearance-standard .mat-pseudo-checkbox{--mat-minimal-pseudo-checkbox-selected-checkmark-color: var( --mat-standard-button-toggle-selected-state-text-color )}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard:not([class*=mat-elevation-z]),.mat-button-toggle-group-appearance-standard:not([class*=mat-elevation-z]){box-shadow:none}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative;color:var(--mat-legacy-button-toggle-text-color);font-family:var(--mat-legacy-button-toggle-label-text-font);font-size:var(--mat-legacy-button-toggle-label-text-size);line-height:var(--mat-legacy-button-toggle-label-text-line-height);font-weight:var(--mat-legacy-button-toggle-label-text-weight);letter-spacing:var(--mat-legacy-button-toggle-label-text-tracking);--mat-minimal-pseudo-checkbox-selected-checkmark-color: var( --mat-legacy-button-toggle-selected-state-text-color )}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:var(--mat-legacy-button-toggle-focus-state-layer-opacity)}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle .mat-pseudo-checkbox{margin-right:12px}[dir=rtl] .mat-button-toggle .mat-pseudo-checkbox{margin-right:0;margin-left:12px}.mat-button-toggle-checked{color:var(--mat-legacy-button-toggle-selected-state-text-color);background-color:var(--mat-legacy-button-toggle-selected-state-background-color)}.mat-button-toggle-disabled{color:var(--mat-legacy-button-toggle-disabled-state-text-color);background-color:var(--mat-legacy-button-toggle-disabled-state-background-color);--mat-minimal-pseudo-checkbox-disabled-selected-checkmark-color: var( --mat-legacy-button-toggle-disabled-state-text-color )}.mat-button-toggle-disabled.mat-button-toggle-checked{background-color:var(--mat-legacy-button-toggle-disabled-selected-state-background-color)}.mat-button-toggle-appearance-standard{color:var(--mat-standard-button-toggle-text-color);background-color:var(--mat-standard-button-toggle-background-color);font-family:var(--mat-standard-button-toggle-label-text-font);font-size:var(--mat-standard-button-toggle-label-text-size);line-height:var(--mat-standard-button-toggle-label-text-line-height);font-weight:var(--mat-standard-button-toggle-label-text-weight);letter-spacing:var(--mat-standard-button-toggle-label-text-tracking)}.mat-button-toggle-group-appearance-standard .mat-button-toggle-appearance-standard+.mat-button-toggle-appearance-standard{border-left:solid 1px var(--mat-standard-button-toggle-divider-color)}[dir=rtl] .mat-button-toggle-group-appearance-standard .mat-button-toggle-appearance-standard+.mat-button-toggle-appearance-standard{border-left:none;border-right:solid 1px var(--mat-standard-button-toggle-divider-color)}.mat-button-toggle-group-appearance-standard.mat-button-toggle-vertical .mat-button-toggle-appearance-standard+.mat-button-toggle-appearance-standard{border-left:none;border-right:none;border-top:solid 1px var(--mat-standard-button-toggle-divider-color)}.mat-button-toggle-appearance-standard.mat-button-toggle-checked{color:var(--mat-standard-button-toggle-selected-state-text-color);background-color:var(--mat-standard-button-toggle-selected-state-background-color)}.mat-button-toggle-appearance-standard.mat-button-toggle-disabled{color:var(--mat-standard-button-toggle-disabled-state-text-color);background-color:var(--mat-standard-button-toggle-disabled-state-background-color)}.mat-button-toggle-appearance-standard.mat-button-toggle-disabled .mat-pseudo-checkbox{--mat-minimal-pseudo-checkbox-disabled-selected-checkmark-color: var( --mat-standard-button-toggle-disabled-selected-state-text-color )}.mat-button-toggle-appearance-standard.mat-button-toggle-disabled.mat-button-toggle-checked{color:var(--mat-standard-button-toggle-disabled-selected-state-text-color);background-color:var(--mat-standard-button-toggle-disabled-selected-state-background-color)}.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{background-color:var(--mat-standard-button-toggle-state-layer-color)}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:var(--mat-standard-button-toggle-hover-state-layer-opacity)}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:var(--mat-standard-button-toggle-focus-state-layer-opacity)}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;user-select:none;display:inline-block;padding:0 16px;line-height:var(--mat-legacy-button-toggle-height);position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px;line-height:var(--mat-standard-button-toggle-height)}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;pointer-events:none;opacity:0;background-color:var(--mat-legacy-button-toggle-state-layer-color)}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 500px;opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked:hover .mat-button-toggle-focus-overlay{opacity:.6}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{--mat-focus-indicator-border-radius:var(--mat-standard-button-toggle-shape)}.mat-button-toggle-group-appearance-standard .mat-button-toggle:last-of-type .mat-button-toggle-button::before{border-top-right-radius:var(--mat-standard-button-toggle-shape);border-bottom-right-radius:var(--mat-standard-button-toggle-shape)}.mat-button-toggle-group-appearance-standard .mat-button-toggle:first-of-type .mat-button-toggle-button::before{border-top-left-radius:var(--mat-standard-button-toggle-shape);border-bottom-left-radius:var(--mat-standard-button-toggle-shape)}\"],\n        encapsulation: 2,\n        changeDetection: 0\n      });\n    }\n  }\n  return MatButtonToggle;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatButtonToggleModule = /*#__PURE__*/(() => {\n  class MatButtonToggleModule {\n    static {\n      this.ɵfac = function MatButtonToggleModule_Factory(t) {\n        return new (t || MatButtonToggleModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: MatButtonToggleModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        imports: [MatCommonModule, MatRippleModule, MatButtonToggle, MatCommonModule]\n      });\n    }\n  }\n  return MatButtonToggleModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP, MAT_BUTTON_TOGGLE_GROUP_DEFAULT_OPTIONS_FACTORY, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggle, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleModule };\n","import { Component } from '@angular/core';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport {\n  LayerComponent,\n  MapComponent,\n  VectorSourceComponent,\n} from '@maplibre/ngx-maplibre-gl';\nimport { LayerSpecification } from 'maplibre-gl';\n\n@Component({\n  selector: 'showcase-demo',\n  template: `\n    <mgl-map\n      [style]=\"\n        'https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL'\n      \"\n      [zoom]=\"[3]\"\n      [center]=\"[-71.97722138410576, -13.517379300798098]\"\n      [preserveDrawingBuffer]=\"true\"\n    >\n      <mgl-vector-source\n        id=\"countries\"\n        [tiles]=\"['https://demotiles.maplibre.org/tiles/{z}/{x}/{y}.pbf']\"\n      >\n      </mgl-vector-source>\n      <mgl-vector-source\n        id=\"everything\"\n        url=\"https://api.maptiler.com/tiles/v3/tiles.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL\"\n      >\n      </mgl-vector-source>\n      <mgl-layer\n        id=\"countries-layer\"\n        type=\"line\"\n        source=\"countries\"\n        [layout]=\"layouts['countries']\"\n        [paint]=\"{\n          'line-color': 'blue'\n        }\"\n        sourceLayer=\"countries\"\n      >\n      </mgl-layer>\n      <mgl-layer\n        id=\"names\"\n        type=\"symbol\"\n        source=\"everything\"\n        [layout]=\"layouts['names']\"\n        sourceLayer=\"place\"\n      >\n      </mgl-layer>\n    </mgl-map>\n    <div class=\"menu\">\n      <mat-button-toggle\n        [checked]=\"true\"\n        value=\"names\"\n        (change)=\"toggleLayer($event)\"\n        ><span data-cy=\"countries-toggle-button\"\n          >countries names</span\n        ></mat-button-toggle\n      >\n      <mat-button-toggle\n        [checked]=\"true\"\n        value=\"countries\"\n        (change)=\"toggleLayer($event)\"\n        ><span data-cy=\"countries-toggle-borders\"\n          >countries border</span\n        ></mat-button-toggle\n      >\n    </div>\n  `,\n  styleUrls: ['./examples.css', './toggle-layers.component.css'],\n  standalone: true,\n  imports: [\n    MapComponent,\n    VectorSourceComponent,\n    LayerComponent,\n    MatButtonToggleModule,\n  ],\n})\nexport class ToggleLayersComponent {\n  layouts: { [key: string]: LayerSpecification['layout'] } = {\n    countries: {\n      visibility: 'none',\n    },\n    names: {\n      visibility: 'none',\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      'text-field': '{name:latin}',\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      'text-size': 30,\n    },\n  };\n\n  toggleLayer(evt: { value: string }) {\n    this.layouts[evt.value] = {\n      ...this.layouts[evt.value],\n      visibility:\n        (this.layouts[evt.value] as any).visibility === 'visible'\n          ? 'none'\n          : 'visible',\n    };\n  }\n}\n"],"mappings":"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","names":["_c0","_c1","MatButtonToggle_Conditional_3_Template","rf","ctx","ɵɵelement","ctx_r1","ɵɵnextContext","ɵɵproperty","MatButtonToggle_Conditional_4_Template","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","InjectionToken","MAT_BUTTON_TOGGLE_GROUP_DEFAULT_OPTIONS_FACTORY","MAT_BUTTON_TOGGLE_GROUP","uniqueIdCounter","MatButtonToggleChange","source","value","MatButtonToggle","_MatButtonToggle","value","toggleGroup","_changeDetectorRef","_elementRef","_focusMonitor","defaultTabIndex","defaultOptions","EventEmitter","parsedTabIndex","group","uniqueIdCounter","options","newChecked","focusable","toggle","MatButtonToggleChange","t","ɵɵdirectiveInject","MAT_BUTTON_TOGGLE_GROUP","ChangeDetectorRef","ElementRef","FocusMonitor","ɵɵinjectAttribute","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","ɵɵdefineComponent","rf","ctx","ɵɵviewQuery","_c0","_t","ɵɵqueryRefresh","ɵɵloadQuery","ɵɵlistener","ɵɵattribute","ɵɵclassProp","booleanAttribute","ɵɵInputTransformsFeature","ɵɵStandaloneFeature","_c1","_r1","ɵɵgetCurrentView","ɵɵprojectionDef","ɵɵelementStart","ɵɵrestoreView","ɵɵresetView","ɵɵtemplate","MatButtonToggle_Conditional_3_Template","MatButtonToggle_Conditional_4_Template","ɵɵprojection","ɵɵelementEnd","ɵɵelement","button_r3","ɵɵreference","ɵɵproperty","ɵɵadvance","ɵɵconditional","MatRipple","MatPseudoCheckbox","MatButtonToggleModule","_MatButtonToggleModule","ɵɵdefineNgModule","ɵɵdefineInjector","MatCommonModule","MatRippleModule","ToggleLayersComponent","constructor","layouts","countries","visibility","names","toggleLayer","evt","value","__spreadProps","__spreadValues","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵlistener","$event","ɵɵtext","ɵɵstyleMap","ɵɵproperty","ɵɵpureFunction0","_c0","ɵɵpureFunction2","_c1","ɵɵadvance","_c2","_c3","MapComponent","VectorSourceComponent","LayerComponent","MatButtonToggleModule","MatButtonToggle","styles","_ToggleLayersComponent"],"x_google_ignoreList":[0]}